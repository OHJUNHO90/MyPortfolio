
-- 생성
팩토리 메소드 패턴: 생성할 구상 클래스를 서브클래스에서 결정.
싱글턴: 단 한개의 객체만 생성되도록 함.
추상 팩토리 패턴: 클라이언트에서 구상 클래스를 지정하지 않으면서도 일군의 객체를 생성할수 있도록 함.


-- 행동
스트래티지 패턴: 교환 가능한 행동을 캡슐화해 위임을 통해 어떤 행동을 할지 결정.
스테이트 패턴: 상태를 기반으로 한 행동을 캡슐화, 위임을 통해 어떤 행동을 사용할지 결정.
이터레이터 패턴: 컬렉션이 어떤 식으로 구현되었는지 드러내진 않으면서도 컬렉션 내에 있는 모든 객체에 대해 반복 작업을 처리.
템플릿 메소드 패턴: 알고리즘의 개별 단계를 구현하는 방법을 서브클래스에서 결정.
커맨드 패턴: 요청을 객체로 감쌈
옵저버 패턴: 상태가 변경되면 다른 객체들한테 연락을 돌릴수 있게 해줌.


--구조
데코레이터 패턴: 객체를 감싸서 새로운 행동을 제공.
퍼사드 패턴: 일련의 클래스에 대해 간단한 인터페이스를 제공.
프록시 패턴: 객체를 감싸서 그 객체에 대한 접근을 제어.
컴포지트 패턴: 클라이언트에서 객체 컬렉션과 개별 객체를 똑같이 다룰수 있도록 해줌
어댑터 패턴: 객체를 감싸서 다른 인터페이스를 제공.


